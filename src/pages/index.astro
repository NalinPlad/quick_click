---
import "../styles/global.css";
---

<html lang="en" class="bg-blue-200">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Quick Click</title>
		<script data-goatcounter="https://ajith.goatcounter.com/count"
        async src="//gc.zgo.at/count.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/chart.js" client:load></script>
	</head>
	<body class="flex flex-col items-center p-8 gap-8">
		<div>
			<div class="flex items-center gap-4">
				<h1 class="text-indigo-600 text-5xl font-serif font-bold ">Quick <span class="text-blue-600">Click</span></h1>
				
				<div class="relative">
					<button id="menu-button" class="p-2 hover:bg-indigo-100 rounded-lg shadow-2xl" aria-label="Menu" aria-expanded="false">
						<div class="w-6 h-1 bg-indigo-600 mb-1 rounded"></div>
						<div class="w-6 h-1 bg-indigo-600 mb-1 rounded"></div>
						<div class="w-6 h-1 bg-indigo-600 rounded"></div>
					</button>
					<div id="menu" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-xl z-50">
						<a href="#" id="reset-scores" class="block px-4 py-2 text-red-500 font-bold bg-red-200 hover:bg-red-300 transition-all rounded-t-lg">Delete All Data</a>
						<a href="#" class="block px-4 py-2 text-gray-700 hover:bg-indigo-100 rounded-b-lg transition-all">Restore</a>
					</div>
				</div>
	
	
				<!-- do not remove -->
				<!-- <div class="hidden grid-cols-3 grid-cols-4 grid-cols-5 grid-cols-6"/> -->
	
				<script>
					const menuButton = document.getElementById('menu-button');
					const menu = document.getElementById('menu');
	
					menuButton.addEventListener('click', () => {
						const isExpanded = menuButton.getAttribute('aria-expanded') === 'true';
						menuButton.setAttribute('aria-expanded', !isExpanded);
						menu.classList.toggle('hidden');
					});
	
					const resetScores = document.getElementById('reset-scores');
					resetScores.addEventListener('click', (e) => {
						e.preventDefault();
						localStorage.removeItem('timeHistory');
						timeHistory.innerHTML = '';
						roundTime.innerText = '-';
					});
	
					// Close menu when clicking outside
					document.addEventListener('click', (event) => {
						if (!menuButton.contains(event.target) && !menu.contains(event.target)) {
							menuButton.setAttribute('aria-expanded', 'false');
							menu.classList.add('hidden');
						}
					});
				</script>
	
			</div>
			<h2 class="text-blue-600 text-2xl font-serif font-bold text-center opacity-75">by <a href="https://github.com/NalinPlad" class="text-indigo-600">notmysql</a></h2>
		</div>
		
		
		<div class="w-64">
			<label for="level-select" class="block text-gray-700 font-bold mb-2 text-center">Select Level</label>
			<input id="level-select" type="range" min="1" max="4" value="1" class="w-full h-2 bg-indigo-600 rounded-lg appearance-none cursor-pointer [&::-webkit-slider-thumb]:w-6 [&::-webkit-slider-thumb]:h-6 [&::-webkit-slider-thumb]:bg-white [&::-webkit-slider-thumb]:border-4 [&::-webkit-slider-thumb]:border-indigo-600 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:appearance-none [&::-moz-range-thumb]:w-6 [&::-moz-range-thumb]:h-6 [&::-moz-range-thumb]:bg-white [&::-moz-range-thumb]:border-4 [&::-moz-range-thumb]:border-indigo-600 [&::-moz-range-thumb]:rounded-full">
			<div class="flex justify-between text-sm text-gray-700 px-1 mt-2 font-bold">
				<span>3x3</span>
				<span>4x4</span>
				<span>5x5</span>
				<span>6x6</span>
			</div>
		</div>

		<div class="flex items-center gap-8">
			<div id="hoverspot" class="w-16 h-16 bg-white border-4 border-indigo-200 hover:border-indigo-600 rounded-lg cursor-pointer transition-colors duration-200 flex items-center justify-center opacity-75 hover:opacity-100"><p>ðŸ™ˆ</p></div>
			
			<div class="relative">
				<p id="start-text" class="absolute font-bold inset-0 flex items-center justify-center bg-white/80 text-xl text-slate-600 rounded-lg z-10 text-center p-5">Hover the square to start pattern round</p>
				<div id="grid-container" class="w-[300px] h-[300px] bg-white rounded-lg shadow-lg p-4">
					<div id="grid" class="w-full h-full grid grid-cols-3 gap-1"></div>
				</div>
			</div>
			<div class="w-fit min-w-[150px] h-[300px] bg-white rounded-lg shadow-lg flex flex-col">
				<div class="bg-indigo-100 p-4 rounded-t-lg">
					<h2 id="round_time" class="text-xl font-bold text-slate-700">-</h2>
					<h3 id="pr_time" class="text-sm font-bold text-slate-400">PR: -</h3>
				</div>
				<div class="p-4 overflow-y-scroll" id="time_history"></div>
			</div>
		</div>

		<div>
			<canvas id="linechart"></canvas>
		</div>
		<div>
			<canvas id="histogram"></canvas>
		</div>
	</body>
</html>

<script>
const slider = document.getElementById('level-select');
const grid = document.getElementById('grid');
const hoverspot = document.getElementById('hoverspot');
const startText = document.getElementById('start-text');
const roundTime = document.getElementById('round_time');
const timeHistory = document.getElementById('time_history');
const prTime = document.getElementById('pr_time')

let correctPattern = [];
let playerPattern = [];
let cellsSelectable = false;
let stopwatchInterval;
let startTime;
let countdownInterval;

const baseCellBg = 'bg-indigo-100';
const revealedPatternCellBg = 'bg-indigo-500';
const playerSelectedCellBg = 'bg-indigo-500';
const commonCellClasses = ['rounded', 'transition-all', 'duration-100', 'hover:scale-[0.98]'];

function createGrid(size) {
	grid.innerHTML = '';
	grid.className = `w-full h-full grid gap-1 grid-cols-${size} grid-rows-${size}`;
	const totalCells = size * size;
	for (let i = 0; i < totalCells; i++) {
		const cell = document.createElement('div');
		cell.classList.add(baseCellBg, ...commonCellClasses);
		cell.dataset.index = i;
		grid.appendChild(cell);
	}
}

function startStopwatch() {
	startTime = Date.now();
	stopwatchInterval = setInterval(() => {
		const elapsedTime = Date.now() - startTime;
		const seconds = (elapsedTime / 1000).toFixed(2);
		roundTime.textContent = `${seconds}s`;
	}, 10);
}

function stopStopwatch() {
	clearInterval(stopwatchInterval);
	const elapsedTime = Date.now() - startTime;
	const seconds = (elapsedTime / 1000).toFixed(2);
	roundTime.textContent = `${seconds}s`;
	return seconds;
}

let history = JSON.parse(localStorage.getItem('quickClickHistory')) || {
	'3': [], // 3x3 grid times
	'4': [], // 4x4 grid times
	'5': [], // 5x5 grid times
	'6': []  // 6x6 grid times
};

const linechart = document.getElementById('linechart');
const histogram = document.getElementById('histogram');


function updateTimeHistory() {
	// Clear existing entries
	timeHistory.innerHTML = '';

	// Get current grid size and times
	const gridSize = parseInt(slider.value) + 2;
	const times = history[gridSize] || [];

	
	// Render each time entry

	const PR = Math.min(...history[gridSize]);

	times.forEach((time, index) => {
		const timeEntry = document.createElement('div');
		
		// Check if this time is better than all subsequent times (PR)
		const isPR = !times.slice(index + 1).some(t => parseFloat(t) <= parseFloat(time));

		// Check if its equal to best subsequent time (tied your PR)
		// const isTied = times.slice(index + 1).some(t => parseFloat(t) === parseFloat(time));
		const isTied = false; 

		const isWithin10Percent = parseFloat(time) <= PR * 1.1;
		
		if (isPR) {
			if(parseFloat(time) === Math.min(...history[gridSize])) {
				timeEntry.className = 'text-green-600 font-bold mb-2';
				timeEntry.innerHTML = `${time}s <span class="ml-2 text-sm bg-green-100 text-green-800 px-2 py-0.5 rounded">PR ðŸ‘‘</span>`;
			} else {
				timeEntry.className = 'text-blue-600 font-bold mb-2';
				timeEntry.innerHTML = `${time}s <span class="ml-2 text-sm bg-blue-100 text-blue-800 px-2 py-0.5 rounded">Imp.</span>`;
			}
		} else if (isTied) {
			timeEntry.className = 'text-yellow-600 font-bold mb-2';
			timeEntry.innerHTML = `${time}s <span class="ml-2 text-sm bg-yellow-100 text-yellow-800 px-2 py-0.5 rounded">=</span>`;
		} else if (isWithin10Percent) {
			const diff = (parseFloat(time) - PR).toFixed(2);
			timeEntry.className = 'text-yellow-600 font-bold mb-2';
			timeEntry.innerHTML = `${time}s <span class="ml-2 text-sm bg-yellow-100 text-yellow-800 px-2 py-0.5 rounded">${PR != Infinity ? '+'+diff : ''}</span>`;
		} else {
			timeEntry.className = 'text-slate-700 font-bold mb-2';
			timeEntry.textContent = `${time}s`;
		}
		
		timeHistory.appendChild(timeEntry);
	});

	prTime.textContent = `PR: ${PR != Infinity ? PR + 's' : '-'}`;
	
	// Update line chart with the last 10 times
	updateLineChart();
	updateHistogram();
}

// Function to update histogram chart
function updateHistogram() {
	const gridSize = parseInt(slider.value) + 2;
	const times = history[gridSize] || [];

	if (times.length === 0) return;

	// Remove outliers (times > Q3 + 1.5 * IQR)
	const sortedTimes = [...times].sort((a,b) => a - b);
	const q1 = sortedTimes[Math.floor(sortedTimes.length * 0.25)];
	const q3 = sortedTimes[Math.floor(sortedTimes.length * 0.75)];
	const iqr = q3 - q1;
	const upperLimit = q3 + (1.5 * iqr);
	
	const filteredTimes = times.filter(t => t <= upperLimit);

	// Calculate optimal number of bins using Sturges' formula
	const numBins = Math.min((filteredTimes.length), 20);

	// Create bins
	const min = Math.min(...filteredTimes);
	const max = Math.max(...filteredTimes);
	const binWidth = (max - min) / numBins;
	const bins = Array(numBins).fill(0);

	// Count frequencies
	filteredTimes.forEach(time => {
		const binIndex = Math.min(Math.floor((time - min) / binWidth), numBins - 1);
		bins[binIndex]++;
	});

	const ctx = document.getElementById('histogram').getContext('2d');

	// Create or update histogram
	if (!window.histogramChart) {
		window.histogramChart = new Chart(ctx, {
			type: 'bar',
			data: {
				labels: bins.map((_, i) => (min + (i * binWidth)).toFixed(2)),
				datasets: [{
					data: bins,
					backgroundColor: 'rgba(79, 70, 229, 0.5)',
					borderColor: 'rgb(79, 70, 229)',
					borderWidth: 1
				}]
			},
			options: {
				responsive: true,
				aspectRatio: 4,
				plugins: {
					legend: {
						display: false
					}
				},
				scales: {
					y: {
						beginAtZero: true,
						title: {
							display: true,
							text: 'Frequency'
						},
						grid: {
							display: false
						}
					},
					x: {
						grid: {
							display: false
						},
						ticks: {
							display: false
						}
					}
				}
			}
		});
	} else {
		window.histogramChart.data.labels = bins.map((_, i) => (min + (i * binWidth)).toFixed(2));
		window.histogramChart.data.datasets[0].data = bins;
		window.histogramChart.update('quiet');
	}
}


// New function to update the line chart
function updateLineChart() {
	const gridSize = parseInt(slider.value) + 2;
	const times = history[gridSize] || [];
	const last10Times = times.slice(0, 10).reverse(); // Get last 10 times in reverse order

	const ctx = document.getElementById('linechart').getContext('2d');
	
	// Create chart if it doesn't exist
	if (!window.lineChart) {
		window.lineChart = new Chart(ctx, {
			type: 'line',
			data: {
				labels: last10Times.map((_, index) => ``),
				datasets: [{
					label: ``,
					data: last10Times,
					borderColor: 'rgb(79, 70, 229)',
					tension: 0.1
				}]
			},
			options: {
				responsive: true,
				aspectRatio: 4, // Makes the chart half as tall
				plugins: {
					legend: {
						display: false
					}
				},
				scales: {
					y: {
						// beginAtZero: true,
						title: {
							display: true,
							text: 'Time'
						},
						grid: {
							display: false
						},
						ticks: {
							display: false
						}
					},
					x: {
						grid: {
							display: false
						}
					}
				}
			}
		});
	} else {
		// Update existing chart
		window.lineChart.data.labels = last10Times.map((_, index) => ``);
		window.lineChart.data.datasets[0].data = last10Times;
		window.lineChart.data.datasets[0].label = ``;
		window.lineChart.update('quiet');
	}
}


function addTimeToHistory(seconds) {
	const gridSize = parseInt(slider.value) + 2;
	
	// Add to history object
	history[gridSize].unshift(seconds);
	
	// Save to localStorage
	localStorage.setItem('quickClickHistory', JSON.stringify(history));

	// Update display
	updateTimeHistory();
}


updateTimeHistory();


function startCountdown() {

	clearInterval(stopwatchInterval);
	const cells = Array.from(grid.children);
	cells.forEach(cell => {
		cell.classList.remove(revealedPatternCellBg, playerSelectedCellBg);
		if (!cell.classList.contains(baseCellBg)) {
			cell.classList.add(baseCellBg);
		}
	});
	correctPattern = [];
	playerPattern = [];

	let count = 2;
	startText.textContent = "ðŸŸ¡ ðŸŸ¢";
	countdownInterval = setInterval(() => {
		count--;
		if (count > 0) {
			startText.textContent = "ðŸŸ¢ ".repeat(count);
		} else {
			clearInterval(countdownInterval);
			startText.textContent = 'Hover the square to start pattern round';
			showPattern();
		}
	}, 1000);
}

function showPattern() {
	hideStartText();
	correctPattern = [];
	playerPattern = [];
	cellsSelectable = false;
	startStopwatch();

	const cells = Array.from(grid.children);
	cells.forEach(cell => {
		cell.classList.remove(revealedPatternCellBg, playerSelectedCellBg);
		if (!cell.classList.contains(baseCellBg)) {
			cell.classList.add(baseCellBg);
		}
	});

	const gridSize = parseInt(slider.value) + 2;
	const totalCells = gridSize * gridSize;
	const numToSelect = Math.floor(totalCells / 2);
	
	while (correctPattern.length < numToSelect) {
		const randomIndex = Math.floor(Math.random() * totalCells);
		if (!correctPattern.includes(randomIndex)) {
			correctPattern.push(randomIndex);
		}
	}

	correctPattern.forEach(index => {
		const cell = cells[index];
		if (cell) {
			cell.classList.replace(baseCellBg, revealedPatternCellBg);
		}
	});
}

function hidePatternAndAllowPlay() {
	const cells = Array.from(grid.children);
	correctPattern.forEach(index => {
		const cell = cells[index];
		if (cell && cell.classList.contains(revealedPatternCellBg)) {
			cell.classList.replace(revealedPatternCellBg, baseCellBg);
		}
	});
	cellsSelectable = true;
}

function handleCellClick(event) {
	if (!cellsSelectable || typeof event.target.dataset.index === 'undefined') return;

	const clickedCell = event.target;
	const cellIndex = parseInt(clickedCell.dataset.index);

	if (clickedCell.classList.contains(playerSelectedCellBg)) {
		clickedCell.classList.replace(playerSelectedCellBg, baseCellBg);
		playerPattern = playerPattern.filter(idx => idx !== cellIndex);
	} else if (clickedCell.classList.contains(baseCellBg)) {
		clickedCell.classList.replace(baseCellBg, playerSelectedCellBg);
		playerPattern.push(cellIndex);
	}
	checkWinCondition();
}

function hideStartText() {
	startText.style.display = 'none';
}

function showStartText() {
	startText.style.display = '';
}




function checkWinCondition() {
	if (correctPattern.length === 0) return;

	const sortedCorrect = [...correctPattern].sort((a, b) => a - b);
	const sortedPlayer = [...playerPattern].sort((a, b) => a - b);

	if (sortedCorrect.length === sortedPlayer.length && sortedCorrect.every((val, idx) => val === sortedPlayer[idx])) {
		const finalTime = stopStopwatch();
		addTimeToHistory(finalTime);
		cellsSelectable = false;
		showStartText()
		playerPattern = [];
	}
}

const initialGridSize = parseInt(slider.value) + 2;
createGrid(initialGridSize);

slider.addEventListener('input', (e) => {
	const size = parseInt(e.target.value) + 2;
	createGrid(size);
	showStartText();
	cellsSelectable = false;
	correctPattern = [];
	playerPattern = [];

	updateTimeHistory()

	clearInterval(stopwatchInterval);
	roundTime.innerText = "-";
});

hoverspot.addEventListener('mouseenter', () => {
	showStartText();

	startCountdown();
});

hoverspot.addEventListener('mouseleave', () => {
	clearInterval(countdownInterval);
	startText.textContent = 'Hover the square to start pattern round';
	hidePatternAndAllowPlay();
});

grid.addEventListener('click', handleCellClick);
</script>